From c5d558254d3db137972fc25df60b33b6da8315c6 Mon Sep 17 00:00:00 2001
From: ekisu <dts.ramon@gmail.com>
Date: Tue, 24 Jun 2025 00:19:10 -0300
Subject: [PATCH] resolve drive symlink

---
 dlls/ntdll/unix/virtual.c     | 84 +++++++++++++++++++++++++++++++----
 dlls/psapi/tests/psapi_main.c |  5 +--
 2 files changed, 77 insertions(+), 12 deletions(-)

diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
index 706dbdc..02512ca 100644
--- a/dlls/ntdll/unix/virtual.c
+++ b/dlls/ntdll/unix/virtual.c
@@ -5428,30 +5428,98 @@ static NTSTATUS get_working_set_ex( HANDLE process, LPCVOID addr,
     return STATUS_SUCCESS;
 }
 
+static unsigned int read_nt_symlink( UNICODE_STRING *name, UNICODE_STRING *targetW )
+{
+        unsigned int status;
+        OBJECT_ATTRIBUTES attr;
+        HANDLE handle;
+
+        InitializeObjectAttributes( &attr, name, OBJ_CASE_INSENSITIVE, 0, NULL );
+
+        if (!(status = NtOpenSymbolicLinkObject( &handle, SYMBOLIC_LINK_QUERY, &attr )))
+        {
+                status = NtQuerySymbolicLinkObject( handle, targetW, NULL );
+                NtClose( handle );
+        }
+        return status;
+}
+
+static unsigned int follow_device_symlink( WCHAR *name_ret, SIZE_T max_ret_len,
+                                                                           WCHAR *buffer, SIZE_T buffer_len,
+                                                                           SIZE_T *current_path_len )
+{
+        unsigned int status = STATUS_SUCCESS;
+        SIZE_T devname_len = 6 * sizeof(WCHAR); /* e.g. \??\C: */
+        UNICODE_STRING devname, targetW;
+
+        if (*current_path_len >= devname_len && buffer[devname_len / sizeof(WCHAR) - 1] == ':') {
+                devname.Buffer = buffer;
+                devname.Length = devname_len;
+
+                targetW.Buffer = buffer + (*current_path_len / sizeof(WCHAR));
+                targetW.MaximumLength = buffer_len - *current_path_len - sizeof(WCHAR);
+                if (!(status = read_nt_symlink( &devname, &targetW )))
+                {
+                        *current_path_len -= devname_len; /* skip the device name */
+                        *current_path_len += targetW.Length;
+
+                        if (*current_path_len <= max_ret_len)
+                        {
+                                memcpy( name_ret, targetW.Buffer, targetW.Length ); /* Copy the drive path */
+                                memcpy( name_ret + targetW.Length / sizeof(WCHAR), /* Copy the rest of the path */
+                                                buffer + devname_len / sizeof(WCHAR),
+                                                *current_path_len - targetW.Length );
+                        }
+                        else status = STATUS_BUFFER_OVERFLOW;
+                }
+        }
+        else if (*current_path_len <= max_ret_len) {
+                memcpy( name_ret, buffer, *current_path_len );
+        }
+        else status = STATUS_BUFFER_OVERFLOW;
+
+        return status;
+}
+
 static unsigned int get_memory_section_name( HANDLE process, LPCVOID addr,
                                              MEMORY_SECTION_NAME *info, SIZE_T len, SIZE_T *ret_len )
 {
+    SIZE_T current_path_len, max_path_len = 0;
+    /* buffer to hold the path + 6 chars devname (e.g. \??\C:) */
+    SIZE_T buffer_len = (MAX_PATH + 6) * sizeof(WCHAR);
+    WCHAR *buffer = NULL;
     unsigned int status;
 
     if (!info) return STATUS_ACCESS_VIOLATION;
+    if (!(buffer = malloc( buffer_len ))) return STATUS_NO_MEMORY;
+    if (len > sizeof(*info) + sizeof(WCHAR))
+    {
+        max_path_len = len - sizeof(*info) - sizeof(WCHAR); /* dont count null char */
+    }
 
     SERVER_START_REQ( get_mapping_filename )
     {
         req->process = wine_server_obj_handle( process );
         req->addr = wine_server_client_ptr( addr );
-        if (len > sizeof(*info) + sizeof(WCHAR))
-            wine_server_set_reply( req, info + 1, len - sizeof(*info) - sizeof(WCHAR) );
+        wine_server_set_reply( req, buffer, MAX_PATH );
         status = wine_server_call( req );
-        if (!status || status == STATUS_BUFFER_OVERFLOW)
+
+        if (!status)
         {
-            if (ret_len) *ret_len = sizeof(*info) + reply->len + sizeof(WCHAR);
-            if (len < sizeof(*info)) status = STATUS_INFO_LENGTH_MISMATCH;
+            current_path_len = reply->len;
+            status = follow_device_symlink( (WCHAR *)(info + 1), max_path_len, buffer, buffer_len, &current_path_len);
+            if (len < sizeof(*info))
+            {
+                status = STATUS_INFO_LENGTH_MISMATCH;
+            }
+
+            if (ret_len) *ret_len = sizeof(*info) + current_path_len + sizeof(WCHAR);
             if (!status)
             {
                 info->SectionFileName.Buffer = (WCHAR *)(info + 1);
-                info->SectionFileName.Length = reply->len;
-                info->SectionFileName.MaximumLength = reply->len + sizeof(WCHAR);
-                info->SectionFileName.Buffer[reply->len / sizeof(WCHAR)] = 0;
+                info->SectionFileName.Length = current_path_len;
+                info->SectionFileName.MaximumLength = current_path_len + sizeof(WCHAR);
+                info->SectionFileName.Buffer[current_path_len / sizeof(WCHAR)] = 0;
             }
         }
     }
diff --git a/dlls/psapi/tests/psapi_main.c b/dlls/psapi/tests/psapi_main.c
index 9252944..8052702 100644
--- a/dlls/psapi/tests/psapi_main.c
+++ b/dlls/psapi/tests/psapi_main.c
@@ -858,7 +858,6 @@ static void test_GetMappedFileName(void)
     ret = GetMappedFileNameA(GetCurrentProcess(), base, map_name, sizeof(map_name));
     ok(ret, "GetMappedFileName error %ld\n", GetLastError());
     ok(ret > strlen(device_name), "map_name should be longer than device_name\n");
-    todo_wine
     ok(memcmp(map_name, device_name, strlen(device_name)) == 0, "map name does not start with a device name: %s\n", map_name);
 
     SetLastError(0xdeadbeef);
@@ -869,7 +868,6 @@ static void test_GetMappedFileName(void)
     {
         ok(memcmp(map_nameW, nt_map_name, lstrlenW(map_nameW)) == 0, "map name does not start with a device name: %s\n", map_name);
         WideCharToMultiByte(CP_ACP, 0, map_nameW, -1, map_name, MAX_PATH, NULL, NULL);
-        todo_wine
         ok(memcmp(map_name, device_name, strlen(device_name)) == 0, "map name does not start with a device name: %s\n", map_name);
     }
 
@@ -877,7 +875,6 @@ static void test_GetMappedFileName(void)
     ret = GetMappedFileNameA(GetCurrentProcess(), base + 0x2000, map_name, sizeof(map_name));
     ok(ret, "GetMappedFileName error %ld\n", GetLastError());
     ok(ret > strlen(device_name), "map_name should be longer than device_name\n");
-    todo_wine
     ok(memcmp(map_name, device_name, strlen(device_name)) == 0, "map name does not start with a device name: %s\n", map_name);
 
     SetLastError(0xdeadbeef);
@@ -953,7 +950,7 @@ static void test_GetProcessImageFileName(void)
     {
         /* Windows returns 2*strlen-1 */
         ok(ret >= strlen(szImgPath), "szImgPath=\"%s\" ret=%ld\n", szImgPath, ret);
-        todo_wine ok(!strcmp(szImgPath, szMapPath), "szImgPath=\"%s\" szMapPath=\"%s\"\n", szImgPath, szMapPath);
+        ok(!strcmp(szImgPath, szMapPath), "szImgPath=\"%s\" szMapPath=\"%s\"\n", szImgPath, szMapPath);
     }
 
     SetLastError(0xdeadbeef);
-- 
2.49.0

